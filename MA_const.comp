#version 460

layout(set = 0, binding = 0) buffer readonly restrict in_a { float a[]; };
layout(set = 0, binding = 1) buffer writeonly restrict out_b { float b[]; };

layout (local_size_x = 64) in;

layout(push_constant) uniform PushConstants {
    uint size;
};

layout(constant_id = 0) const uint ma_size = 1;
layout(constant_id = 1) const uint variant = 1;

const uint wg_size = gl_WorkGroupSize.x;
shared float block[wg_size * 2];

void main()
{
    const uint wg_index = gl_LocalInvocationID.x;
    const uint wg_id = gl_WorkGroupID.x;

    const uint base_index = wg_id * wg_size;
    const uint index = base_index + wg_index;

    if( variant == 0 )
    {
        if( index >= size ) return;

        const uint start = index >= ma_size - 1 ? index - ma_size + 1 : 0;

        float sum = 0.f;
        for( uint i = start; i < index; ++i )
            sum += a[i];

        b[index] = sum / ma_size;
    } else {
        block[wg_index + 0      ] = index >= wg_size ? a[index - wg_size] : 0.f;
        block[wg_index + wg_size] = index < size ? a[index] : 0.f;
        barrier();

        uint to_apply = ma_size;
        uint data_index = index;

        float sum = 0.f;
        for(; to_apply >= wg_size; to_apply -= wg_size, data_index -= wg_size )
        {
            for( uint j = 0; j < wg_size; j++ )
                sum += block[wg_index + wg_size - j];
            
            barrier();
            
            block[wg_index + 0      ] = data_index >= wg_size ? a[data_index - wg_size] : 0.f;
            block[wg_index + wg_size] = block[wg_index];
            barrier();
        }

        // to_apply < wg_size
        for( uint i = 0; i < to_apply; i++ )
            sum += block[wg_index + wg_size - i];

        float res = sum / ma_size;

        if( index < size )
            b[index] = res;
    }
}